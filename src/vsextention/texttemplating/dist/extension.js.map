{"version":3,"sources":["webpack://TextTemplating/./src/extension.ts","webpack://TextTemplating/external \"vscode\"","webpack://TextTemplating/webpack/bootstrap","webpack://TextTemplating/webpack/startup"],"names":["context","NEXT_TERM_ID","console","log","disposable","vscode","commands","registerCommand","window","showInformationMessage","subscriptions","push","uri","terminal","createTerminal","sendText","fsPath","show","terminals","length","showErrorMessage","items","map","t","label","name","showQuickPick","then","item","undefined","selectTerminal","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","__webpack_modules__"],"mappings":"uIAEA,eAIA,oBAAyBA,GACxB,IAAIC,EAAe,EAGnBC,QAAQC,IAAI,mEAKZ,IAAIC,EAAaC,EAAOC,SAASC,gBAAgB,kBAAkB,KAIlEF,EAAOG,OAAOC,uBAAuB,uCAGtCT,EAAQU,cAAcC,KAAKN,EAAOC,SAASC,gBAAgB,iBAAmBK,IAC7E,MAAMC,EAAWR,EAAOG,OAAOM,eAAe,OAAOb,KACrDY,EAASE,SAAS,cAAcH,EAAII,WACpCH,EAASI,WAEVjB,EAAQU,cAAcC,KAAKN,EAAOC,SAASC,gBAAgB,qBAAqB,MAiDlC,IAApCF,EAAOG,OAAQU,UAAUC,SAClCd,EAAOG,OAAOY,iBAAiB,uBACxB,KAnBT,WAIC,MACMC,EADqChB,EAAOG,OAAQU,UACTI,KAAIC,IAC7C,CACNC,MAAO,SAASD,EAAEE,OAClBZ,SAAUU,MAGZ,OAAOlB,EAAOG,OAAOkB,cAAcL,GAAOM,MAAKC,GACvCA,EAAOA,EAAKf,cAAWgB,IA1C7BC,GAAiBH,MAAKd,IACjBA,GACHA,EAASI,cAMbjB,EAAQU,cAAcC,KAAKP,IAI5B,2B,QCzCA2B,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GCE/B,ODCA,SAASC,EAAoBC,GAE5B,GAAGF,EAAyBE,GAC3B,OAAOF,EAAyBE,GAAUJ,QAG3C,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAK,EAAoBD,GAAUL,EAAQA,EAAOC,QAASG,GAG/CJ,EAAOC,QCjBRG,CAAoB,M","file":"extension.js","sourcesContent":["// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\n\n// this method is called when your extension is activated\n// your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n\tlet NEXT_TERM_ID = 1;\n\t// Use the console to output diagnostic information (console.log) and errors (console.error)\n\t// This line of code will only be executed once when your extension is activated\n\tconsole.log('Congratulations, your extension \"texttemplating\" is now active!');\n\n\t// The command has been defined in the package.json file\n\t// Now provide the implementation of the command with registerCommand\n\t// The commandId parameter must match the command field in package.json\n\tlet disposable = vscode.commands.registerCommand('tt.helloWorlds', () => {\n\t\t// The code you place here will be executed every time your command is executed\n\n\t\t// Display a message box to the user\n\t\tvscode.window.showInformationMessage('Hello World from texttemplating!');\n\t\t\n\t});\n\tcontext.subscriptions.push(vscode.commands.registerCommand('tt.helloWorld',  (uri:vscode.Uri)  => {\n\t\tconst terminal = vscode.window.createTerminal(`TT #${NEXT_TERM_ID++}`);\n\t\tterminal.sendText(`dotnet tt '${uri.fsPath}'`);\n\t\tterminal.show();\n\t}));\n\tcontext.subscriptions.push(vscode.commands.registerCommand('terminalTest.show', () => {\n\t\tif (ensureTerminalExists()) {\n\t\t\tselectTerminal().then(terminal => {\n\t\t\t\tif (terminal) {\n\t\t\t\t\tterminal.show();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}));\n //https://github.com/microsoft/vscode-extension-samples/blob/master/terminal-sample/src/extension.ts\n\tcontext.subscriptions.push(disposable);\n}\n\n// this method is called when your extension is deactivated\nexport function deactivate() {}\nfunction colorText(text: string): string {\n\tlet output = '';\n\tlet colorIndex = 1;\n\tfor (let i = 0; i < text.length; i++) {\n\t\tconst char = text.charAt(i);\n\t\tif (char === ' ' || char === '\\r' || char === '\\n') {\n\t\t\toutput += char;\n\t\t} else {\n\t\t\toutput += `\\x1b[3${colorIndex++}m${text.charAt(i)}\\x1b[0m`;\n\t\t\tif (colorIndex > 6) {\n\t\t\t\tcolorIndex = 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn output;\n}\n\nfunction selectTerminal(): Thenable<vscode.Terminal | undefined> {\n\tinterface TerminalQuickPickItem extends vscode.QuickPickItem {\n\t\tterminal: vscode.Terminal;\n\t}\n\tconst terminals = <vscode.Terminal[]>(<any>vscode.window).terminals;\n\tconst items: TerminalQuickPickItem[] = terminals.map(t => {\n\t\treturn {\n\t\t\tlabel: `name: ${t.name}`,\n\t\t\tterminal: t\n\t\t};\n\t});\n\treturn vscode.window.showQuickPick(items).then(item => {\n\t\treturn item ? item.terminal : undefined;\n\t});\n}\n\nfunction ensureTerminalExists(): boolean {\n\tif ((<any>vscode.window).terminals.length === 0) {\n\t\tvscode.window.showErrorMessage('No active terminals');\n\t\treturn false;\n\t}\n\treturn true;\n}\n","module.exports = require(\"vscode\");;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tif(__webpack_module_cache__[moduleId]) {\n\t\treturn __webpack_module_cache__[moduleId].exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// module exports must be returned from runtime so entry inlining is disabled\n// startup\n// Load entry module and return exports\nreturn __webpack_require__(112);\n"],"sourceRoot":""}